<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zhaiworld.github.io/</id>
    <title>zhaiworld</title>
    <updated>2020-07-21T13:18:48.835Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zhaiworld.github.io/"/>
    <link rel="self" href="https://zhaiworld.github.io/atom.xml"/>
    <subtitle>有策</subtitle>
    <logo>https://zhaiworld.github.io/images/avatar.png</logo>
    <icon>https://zhaiworld.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, zhaiworld</rights>
    <entry>
        <title type="html"><![CDATA[接口用例设计]]></title>
        <id>https://zhaiworld.github.io/post/jie-kou-yong-li-she-ji/</id>
        <link href="https://zhaiworld.github.io/post/jie-kou-yong-li-she-ji/">
        </link>
        <updated>2020-07-21T13:08:55.000Z</updated>
        <content type="html"><![CDATA[<h2 id="do-its-测试法">DO ITS 测试法</h2>
<p>讲出一个产品的某个功能点，如果快速设计出测试用例？下面总结一个方法：</p>
<ul>
<li>Data(数据)<br>
针对整个产品使用过程中输入与输出的数据进行用例设计。</li>
<li>Operation(操作)<br>
在产品经理、各类用户甚至老板的角度上去思考产品的操作流程和使用场景。</li>
<li>Interface(接口)<br>
这个接口是广泛意义上的，不仅是程序接口，还包括用户界面、交互。这里要考虑的就是用户与服务、服务与服务之间的交互。</li>
<li>Time(时间)<br>
主要是交互响应、接口请求响应这类的。会涉及到前端缓存、Redis应用、异常处理、超时机制等技术。</li>
<li>Structure(结构)<br>
要了解服务架构，表示层、业务层和数据层的划分等。针对具体的被测服务，要了解到它的服务依赖、功能模块、数据库设计。</li>
</ul>
<h3 id="接口测试">接口测试</h3>
<h4 id="11-概述">1.1 概述</h4>
<p>接口：主要是子模块或者子系统间交互并相互作用的部分。</p>
<p>这里说的接口是广义的，客户端与后台服务间的协议；插件间通信的接口；模块间的接口；再小到一个类提供的方法；都可以理解为接口。</p>
<p>接口测试：是指针对模块或系统间接口进行的测试。</p>
<h4 id="12-典型问题">1.2 典型问题</h4>
<p>（1）传入参数处理不当，导致程序异常；</p>
<p>（2）类型溢出，导致数据读出和写入不一致；</p>
<p>（3）因对象权限未进行校验，可以访问其他用户敏感信息；</p>
<p>（4）状态处理不当，导致逻辑出现错乱；</p>
<p>（5）逻辑校验不完善，可利用漏洞获取非正当利益等。</p>
<h4 id="13接口测试用例设计">1.3.接口测试用例设计</h4>
<p>接口测试的用例设计，主要从以下几个方面考虑：</p>
<p>1）针对输入，可按照参数类型进行设计；</p>
<p>不同参数类型不同的用例设计。</p>
<p>2）针对接口处理，可按照逻辑进行用例设计；</p>
<p>主要是根据后台逻辑来设计用例。每个参数代表什么含义，调了后端的什么服务什么接口，有没有依赖其它服务等等。</p>
<blockquote>
<p>案例1：信贷——实名中心。<br>
信贷侧调用实名中心接口上传身份证照片，上传成功后立即查询实名中心校验结果。实名中心做两件事：一是校验身份证是否有效合法； 二是存储身份证图像信息。信贷查询接口对返回结果做了强校验（实名成功&amp;身份证图片地址不为空）。通常情况下，实名中心都能成功返回。但是图像存储需要时间，在成功存储前信贷就查询结果，就会造成实名失败的问题。但实际上实名中心是会成功的。<br>
这个问题是在FDS存储异常的情况下发现的。后来在线上查询失败日志，也是存在很多这种情况的。所以，需要优化。</p>
</blockquote>
<p>3）针对输出，可根据结果进行分析设计。</p>
<p>返回结果有哪些值是影响后续逻辑的，所有的状态是否都有相应的前端处理。</p>
<blockquote>
<p>案例2：信贷-第三方扫脸。<br>
与上面的案例十分相似，前端扫脸后信贷获取到扫脸分数，分数及格则成功。实际上，扫脸接口返回值中还有一项“扫脸图像”，这个根据业务方需要进行校验。信贷后续是会使用到这个图像信息的，所以应该强校验。<br>
这个问题是在后续业务获取图像信息时获取不到暴露出来的。</p>
</blockquote>
<blockquote>
<p>案例3：账务的A服务调用B服务，而B又去调用外部X服务，其中，A对B设置的超时时间是3秒，而B对X设置的超时时间是5秒。<br>
X通常在4秒时返回结果。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何确认个人征信]]></title>
        <id>https://zhaiworld.github.io/post/ru-he-que-ren-ge-ren-zheng-xin/</id>
        <link href="https://zhaiworld.github.io/post/ru-he-que-ren-ge-ren-zheng-xin/">
        </link>
        <updated>2020-07-21T13:04:20.000Z</updated>
        <content type="html"><![CDATA[<p>首先，登陆中国人民银行征信中心（官方地址https://ipcrs.pbccrc.org.cn/）【重点：只支持IE浏览器】<br>
根据提示填写身份信息，设置登录名、密码等，完成实名认证与注册。<br>
新用户查询信用信息：登录后完成新手导航，在“安全等级变更”处，如果选择数字证书验证或银行卡验证，在线进行注册申请时，平台实时反馈验证结果。</p>
<p>可以选择是否开通&quot;快捷查询&quot;，开通快捷查询后，可通过输入手机动态码验证身份、快捷提交查询申请。如果用户选择问题验证，在线提交注册申请后，24小时后才会将验证结果以短信方式发送给用户。<br>
生成个人征信报告需要12-24小时，申请后在12-24小时后会收到人行征信中心的身份验证码（有效期7天），届时再登陆官网点击&quot;信息服务&quot;—&quot;获取查询结果&quot;，查看征信报告。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[读书]]></title>
        <id>https://zhaiworld.github.io/post/du-shu/</id>
        <link href="https://zhaiworld.github.io/post/du-shu/">
        </link>
        <updated>2020-07-21T12:59:03.000Z</updated>
        <content type="html"><![CDATA[<pre><code>一运二命三风水，四积阴德五读书。
六名七相八敬神,九交贵人十养生。

2020年读书清单：
《万万没想到》
《高手》
《见识》
《经常学通识》
《一分钟杂学知识》
《无处可避》
《半小时漫画-经济学》
老杨的猫头鹰系列
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[什么webhooks]]></title>
        <id>https://zhaiworld.github.io/post/shi-me-webhooks/</id>
        <link href="https://zhaiworld.github.io/post/shi-me-webhooks/">
        </link>
        <updated>2020-07-21T12:58:06.000Z</updated>
        <content type="html"><![CDATA[<p>webhooks是一个api概念，是微服务api的使用范式之一，也被成为反向api，即：前端不主动发送请求，完全由后端推送。 举个常用例子，比如你的好友发了一条朋友圈，后端将这条消息推送给所有其他好友的客户端，就是 Webhooks 的典型场景。<br>
　　简单来说，WebHook就是一个接收HTTP POST（或GET，PUT，DELETE）的URL。一个实现了WebHook的API提供商就是在当事件发生的时候会向这个配置好的URL发送一条信息。与请求-响应式不同，使用WebHooks，你可以实时接受到变化。<br>
　　这又是一种对客户机-服务器模式的逆转，在传统方法中，客户端从服务器请求数据，然后服务器提供给客户端数据（客户端是在拉数据）。在Webhook范式下，服务器更新所需提供的资源，然后自动将其作为更新发送到客户端（服务器是在推数据），客户端不是请求者，而是被动接收方。这种控制关系的反转可以用来促进许多原本需要在远程服务器上进行更复杂的请求和不断的轮询的通信请求。通过简单地接收资源而不是直接发送请求，我们可以更新远程代码库，轻松地分配资源，甚至将其集成到现有系统中来根据API的需要来更新端点和相关数据，唯一的缺点是初始建立困难。</p>
<p>主要用途：更新客户端，在资源新建或者更新时提供更新的、指定的数据。</p>
<p>常见场景：对于第三方平台验权、登陆等 没有前端界面做中转的场景，或者强安全要求的支付场景等，适合用 Webhooks 做数据主动推送。说白了就是在前端无从参与，或者因为前端安全问题不适合参与时，就是 Webhooks 的场景。很显然 Webhooks 也不是 Http 的替代品，不过的确是一种新的前后端交互方式。<br>
　　如果客户端要长期监听某个任务的状态，按照正常的api调用的方式去做，那么必须不停得轮训服务器来获取当前状态；使用webhook则无需轮训，通过API 可以确定是否发生了更改，如果更改了只需要等待服务器推送信息过来，然后客户端更新就可以。git webhook其实也是这方面的应用。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[算法]]></title>
        <id>https://zhaiworld.github.io/post/suan-fa/</id>
        <link href="https://zhaiworld.github.io/post/suan-fa/">
        </link>
        <updated>2020-07-21T12:54:20.000Z</updated>
        <content type="html"><![CDATA[<pre><code>#给定的字符串
s=&quot;here is a sample of english text&quot;
#新建一个字典
d={}
#遍历s
for c in s:
    # 检查字典d中是否含有键为c的项
    if (c in d):
        # 如果有 则键对应的值+1
        d[c]=(d[c]+1)
    else:
        #否则键对应的值为1
        d[c]=1
print (d)
</code></pre>
<pre><code>def binary_search(lists, key):
    '''判空、仅有1个、排序、low&lt; high、没有查找到'''二分查找法，又叫折半查找，应用于等概分布的有序序列，利用了判定树，平均查找长度 ASL = (log2 n+1) - 1
    if len(lists) == 0:
        return -1
    if len(lists) == 1:
        if key == lists[0]:
            return 0
        else:
            return -1
    new = sorted(lists)
    low, high = 0, len(new) - 1
    while low &lt; high:
        mid = (high - low) / 2
        if new[mid] &gt; key:
            high = mid - 1
        elif new[mid] &lt; key:
            low = mid + 1
        elif new[mid] == key:
            return mid
    return -1
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python 点滴]]></title>
        <id>https://zhaiworld.github.io/post/python-dian-di/</id>
        <link href="https://zhaiworld.github.io/post/python-dian-di/">
        </link>
        <updated>2020-07-21T12:52:27.000Z</updated>
        <content type="html"><![CDATA[<p><strong>init</strong>.py可以为空，只要它存在，就表明此目录应被作为一个package处理。<br>
__all__用来限制具体哪些module是可以被导入的。<br>
<strong>version</strong>.py里面定义框架的名称、描述、版本号等信息<br>
考虑到py2和py3在import上有差异性，可以通过compat.py来解决此类问题。借鉴requests的处理方法。</p>
<p>This assumes ASCII unless told otherwise.<br>
魔法方法：https://pycoders-weekly-chinese.readthedocs.io/en/latest/issue6/a-guide-to-pythons-magic-methods.html</p>
<p>Python中对象包含的三个基本要素，分别是：id(身份标识)、type(数据类型)和value(值)<br>
== 是Python 比较操作符，用来比较判断两个对象的值是否相等<br>
is 是同一性运算符，用来判断is是否相同</p>
<p><strong>合并两个字典</strong><br>
dict_1 = {'apple': 9, 'banana': 6}<br>
dict_2 = {'banana': 4, 'orange': 8}<br>
combined_dict = {**dict_1, **dict_2}<br>
print(combined_dict)</p>
<p>1.元祖不可修改。2.元祖不可删除</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[解决Refused to display 'http://*./*' in a frame问题]]></title>
        <id>https://zhaiworld.github.io/post/jie-jue-refused-to-display-http-in-a-frame-wen-ti/</id>
        <link href="https://zhaiworld.github.io/post/jie-jue-refused-to-display-http-in-a-frame-wen-ti/">
        </link>
        <updated>2020-07-08T02:22:52.000Z</updated>
        <content type="html"><![CDATA[<h3 id="问题描述">问题描述：</h3>
<p>质量管理平台中需要集成另一个系统的报告页面（html，来自Django)，平台集成的方式是通过iframe显示嵌入的页面。但是在加载页面时报错：</p>
<blockquote>
<p>Refused to display 'http://xxxx' in a frame because it set 'X-Frame-Options' to 'sameorigin'.</p>
</blockquote>
<h3 id="解决办法">解决办法：</h3>
<p>在Django项目的setting.py中增加如下配置：</p>
<blockquote>
<p>X_FRAME_OPTIONS = 'ALLOWALL'<br>
在网上找到了类似的解决方法：<br>
X_FRAME_OPTIONS = 'ALLOWALL url'   # url为指定地址</p>
</blockquote>
<p>但是经过实验发现，'ALLOWALL'、'ALLOW'、'ALLOWALL 非质量平台的IP地址'，这三种情况都是访问正常的。不理解为什么第三种情况也是OK的，有懂的朋友欢迎留言指点！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GIT操作]]></title>
        <id>https://zhaiworld.github.io/post/git-cao-zuo/</id>
        <link href="https://zhaiworld.github.io/post/git-cao-zuo/">
        </link>
        <updated>2020-07-07T02:12:10.000Z</updated>
        <content type="html"><![CDATA[<h3 id="分支">分支</h3>
<p><strong>显示所有分支</strong><br>
git branch -a<br>
<strong>切换当前分支</strong><br>
git checkout <branch><br>
<strong>创建新分支，基于当前分支</strong><br>
git branch &lt;new_branch&gt;<br>
<strong>删除本地分支</strong><br>
git branch -d <branch></p>
<p><strong>从远程获取最新版本并merge到本地</strong><br>
root&gt;git pull origin master<br>
From git.n.enterprise.com:XXX/project</p>
<ul>
<li>branch            master     -&gt; FETCH_HEAD<br>
Already up to date.</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[APP Push及测试点]]></title>
        <id>https://zhaiworld.github.io/post/app-push-ji-ce-shi-dian/</id>
        <link href="https://zhaiworld.github.io/post/app-push-ji-ce-shi-dian/">
        </link>
        <updated>2020-07-06T12:37:46.000Z</updated>
        <content type="html"><![CDATA[<h3 id="简介">简介</h3>
<p>消息推送是APP触达用户的优质渠道之一，在App开发中应用的场景是十分常见。</p>
<h3 id="ios-push-原理">iOS Push 原理</h3>
<p>iOS应用的推送大部分情况下都要依赖苹果生态提供的APNs（Apple Push Notification Service）服务。<a href="https://www.jianshu.com/p/5d83250fb5a1">扩展阅读：</a></p>
<h4 id="在线push">在线Push</h4>
<p>当用户在线（APP在前台）时，收到的状态栏的消息提醒，称为在线push。这个功能与苹果系统无关，是我们自己的APP开发的一种功能，该push与设置中是否打开“通知”无关。<br>
判断app是否在线，此处可以根据APP自身的后台策略如上一次与后台交互的时间等方法来判断APP是否在线或者离线。认为在线，会发送在线push，否则，发送离线push。<br>
在线push有以下几个特点：</p>
<ul>
<li>不需要经过苹果APNs。</li>
<li>需要自己实现长链接。</li>
<li>代码在app内部实现。</li>
</ul>
<h4 id="离线push">离线Push</h4>
<p>离线push：当APP在离线（kill掉进程、切到后台、锁屏）时，收到的消息提醒，称为离线push。离线push是需要经过苹果的APNs服务器才可以推送到某台设备的某个APP上的，这是和本地push的本质区别。push与设置中是否打开“通知”有关。<br>
收到推送后（有文字有声音），点开通知，进入APP后，才执行。<br>
主要流程为：</p>
<ol>
<li>服务器端将消息先发送到苹果的APNs</li>
<li>由苹果的APNs将消息推送到客户的设备端</li>
<li>由iOS系统将接收到的消息传递给相应的App。<br>
简而言之离线push是苹果系统的行为，与app状态无关，能够直接推送到指定手机的指定app。<br>
<strong>离线push名词解释—APNs</strong><br>
APNs：Apple Push Notification service(苹果推送通知服务)。<br>
APNs主要用于以下场景：当用户主动杀掉 APP，或者 APP 进入后台超过约定时长时，APP会被kill，这样保障了前台 APP 的流畅性，也延长了手机的使用时长，获得了较好的用户体验，但是这也意味着，服务器无法主动和用户交互（如推送实时消息等），所以苹果推出了 APNs，允许设备和服务器分别与苹果的推送通知服务器保持长连接状态。<br>
关于APNs的更新有以下几点：<br>
● iOS 8以后，APNs推送的字节是2k，iOS8以前是256字节<br>
● iOS 9以后APNs支持HTTP/2协议栈，优化长连接，具有标准的HTTP返回和管道复用技术<br>
● iOS 10以后，推送的字节是4k，APNs可根据推送消息的唯一标示符查询某条消息是否被用户阅读，可更新某一推送消息，而不用发重读的多条消息</li>
</ol>
<h4 id="本地push">本地Push</h4>
<p>本地推送和远程推送的功能是一样的，都是要提醒用户去做某些事情。但是和远程推送不同的就是本地推送是不需要设备联网的，而远程推送是必需要设备联网的，因为只有联网状态下，才能和苹果的APNs服务器建立长连接，从而推送消息。本地推送是由App自己设定的，并且发送给安装此App的这台设备，属于一对一的对应关系。比较典型的应用是闹钟类似的场景。该push与设置中是否打开“通知”有关。</p>
<h3 id="安卓push">安卓Push</h3>
<h4 id="推送实现原理">推送实现原理</h4>
<p>接下来单看看目前各大平台对于推送的架构设计。<br>
推送包括 通道，客户端，和服务端 三层架构。<br>
推送设计实现<br>
<strong>主要是两种实现方式：</strong></p>
<ol>
<li>pull （客户端主动获取）<br>
客户端固定时间主动向服务端获取信息，若有更新信息，则发送至客户端<br>
心跳：轮询时间短:耗电,耗流量。时间长，不能保证消息及时。<br>
轮询：<br>
Timer：WakeLock 让CPU 保持唤醒，耗电量很大<br>
AlarmManager：管理独立的硬件时钟RTC，可以在CPU休眠的时候正常运行。在预设的时间到达之后，唤醒CPU。这样CPU可以正常休眠，只需要任务到达之后醒来一段很短的时间。极光推送就是基于此实现的。</li>
<li>push<br>
客户端被动接受）当服务端有更新时，主动发送到客户端：<br>
主要方式有：SMS、websocket, 长连接<br>
长连接又包括三种方式：<br>
GCM：google的Gcm，容易被国内厂商阉割，而且NAT（Network AddressTranslation）容易超时，长连接无法保持，造成消息推送延迟。<br>
第三方推送：友盟、极光，腾讯信鸽<br>
自定义长连接：长连接、心跳和推送及时率。<br>
保持长连接，是消息及时的重要保证。发送心跳包，如果前台检测发送失败，则重新初始化一个socket。</li>
</ol>
<h4 id="第三方推送平台">第三方推送平台</h4>
<p>这是目前使用广泛也是比较推荐的安卓推送方案，现今主流的推送平台分为</p>
<ol>
<li>手机厂商类：小米推送、华为推送。</li>
<li>第三方平台类：友盟推送、极光推送、云巴（基于MQTT）</li>
<li>BAT大厂的平台推送：阿里云移动推送、腾讯信鸽推送、百度云推送</li>
</ol>
<h4 id="安卓与ios推送的区别">安卓与iOS推送的区别</h4>
<ul>
<li>实现方式：安卓由每个应用各自维护自身的长链接，属于应用级别；ios由ios系统自身维护1个长链接，属于系统级别</li>
<li>原理：安卓推送原理主要是push，pull的方式按需实现;ios客户端将消息推送至苹果服务器，苹果服务器通过该系统级别的长连接，推送到客户端</li>
<li>其他区别：安卓推送到达率低，属于应用级别么容易被系统杀死，维护多个长连接，耗电量高；ios 推送到达率高，长连接不容易被系统杀死，耗电量低</li>
</ul>
<h3 id="测试要点">测试要点</h3>
<ul>
<li>push到达：这是最今本功能，即push能否及时到达，并展示正常</li>
<li>点击push响应：点击push后，能够跳转到对应内容</li>
<li>不同界面打开push：点击push可以直接打开app的某个界面，在不同的界面打开push后，再点击返回可能出现问题，要关注能否正常退出push打开的界面</li>
<li>系统兼容：ios的push机制一直在更新，特别是iOS10后有较大更新，要注意是否能够兼容不同的iOS系统</li>
<li>展开界面功能是否正常：比如push展开后，可能有”收藏“，“评论”等功能，点击这些功能进行使用是否能够正常响应</li>
<li>重装app：卸载重装之后，是否会收到多条push等异常</li>
<li>切换账号：用户切换账号之后是否会出现旧的账号的push等异常</li>
<li>角标计数：理论上没收到一条新的push，角标都+1，看角标计数是否正常</li>
<li>角标消失：打开push或者app之后，角标能否正常消失</li>
<li>多端同时在线：支持多端登录的app，能否在每一端都收到push</li>
<li>游客与登录状态：有些app支持游客态登录，能否正常收到push</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Liunx]]></title>
        <id>https://zhaiworld.github.io/post/linux/</id>
        <link href="https://zhaiworld.github.io/post/linux/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="简介讲解编辑神器vi">简介：讲解编辑神器vi</h3>
<h4 id="vi的基本概念三种模式">vi的基本概念:（三种模式）</h4>
<ul>
<li>命令模式</li>
<li>插入模式</li>
<li>底行模式</li>
</ul>
<blockquote>
<p>进入插入模式：按住键盘的 i 或者 o 或者 a<br>
进入命令模式：按住键盘的左上角esc键<br>
进入底行模式：前提是得在命令模式，输入 ： 进入</p>
</blockquote>
<h5 id="在命令模式中的操作">在命令模式中的操作</h5>
<p>$ ——&gt;移动到这一行的行尾<br>
gg ——&gt;移动到文档第一行行首<br>
G ——&gt;移动到文档最后一行行首<br>
x ——&gt;删除内容，删除一个字符<br>
dd ——&gt;删除游标所在的那一整行<br>
u ——&gt;复原原来的操作<br>
v ——&gt;选中范围按y即复制<br>
p ——&gt;粘贴</p>
<h5 id="在底行模式中的操作">在底行模式中的操作</h5>
<p>n ——&gt;n为数字。光标移动到第n 行<br>
/ ——&gt;寻找内容<br>
%s/word1/word2/g ——&gt;从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2<br>
n1,n2s/word1/word2/g ——&gt;n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代 为 word2<br>
set nu ——&gt;显示行号<br>
set nonu ——&gt;取消行号<br>
q! ——&gt;强制离开不保存<br>
wq ——&gt;离开并保存<br>
wq! ——&gt;强制离开并保存<br>
!ls ——&gt;暂时离开</p>
<h3 id="常用命令">常用命令</h3>
<p>查找某个文件并删除 ：find -name xxx.log | xargs rm -rf<br>
cat /proc/cpuinfo： 查看linux系统的CPU型号、类型以及大小<br>
cat /proc/meminfo查看linux系统内存大小的详细信息，可以查看总内存，剩余内存、可使用内存等信息</p>
]]></content>
    </entry>
</feed>